---
import path from "node:path";

interface Props {
	id?: string;
	src: string;
	class?: string;
	alt?: string;
	position?: string;
	basePath?: string;
}

import { Image } from "astro:assets";
import { url } from "../../utils/url-utils";

const { id, src, alt, position = "center", basePath = "/" } = Astro.props;
const className = Astro.props.class;

const isLocal = !(
	src.startsWith("/") ||
	src.startsWith("http") ||
	src.startsWith("https") ||
	src.startsWith("data:")
);
const isPublic = src.startsWith("/");

// Workaround for images dynamic import (Astro limitation)
// https://github.com/withastro/astro/issues/3373
let img: ImageMetadata | undefined;
if (isLocal) {
	const files = import.meta.glob<ImageMetadata>("../../**", {
		import: "default",
	});

	// Build a normalized path like: ../../content/posts/<slugdir>/<file>
	const normalizedBase = path
		.normalize(path.join("../../", basePath))
		.replace(/\\/g, "/")
		// ensure trailing slash for robust join
		.replace(/(?<!\/)$/, "/");
	const normalizedPath = path
		.normalize(path.join(normalizedBase, src))
		.replace(/\\/g, "/");

	// If basePath points under content/posts, block path traversal outside it
	const postsRoot = "../../content/posts/";
	const enforcePostsRoot =
		normalizedBase.includes("/content/posts/") ||
		normalizedBase.endsWith("content/posts/");
	const withinPostsRoot = normalizedPath.startsWith(postsRoot);

	if (enforcePostsRoot && !withinPostsRoot) {
		console.error(
			`\n[ERROR] Refused to load image outside posts root.\n  basePath: ${basePath}\n  src: ${src}\n  resolved: ${normalizedPath.replace("../../", "src/")}`,
		);
	} else {
		const file = files[normalizedPath];
		if (!file) {
			console.error(
				`\n[ERROR] Image file not found: ${normalizedPath.replace("../../", "src/")}.\n  Hint: keep covers with the post folder and pass basePath like "content/posts/<post-dir>/".`,
			);
		} else {
			try {
				img = await file();
			} catch (e) {
				console.error(
					`\n[ERROR] Failed to import image: ${normalizedPath.replace("../../", "src/")}.\n  ${(e as Error).message}`,
				);
			}
		}
	}
}

const imageClass = "w-full h-full object-cover";
const imageStyle = `object-position: ${position}`;
---
<div id={id} class:list={[className, 'overflow-hidden relative']}>
    <div class="transition absolute inset-0 dark:bg-black/10 bg-opacity-50 pointer-events-none"></div>
	{isLocal && img && <Image src={img} alt={alt || ""} class={imageClass} style={imageStyle}/>}
	{isLocal && !img && (
		<div class="flex items-center justify-center w-full h-full text-sm text-50 bg-black/5 dark:bg-white/10">
			<!-- silently fail in production; show minimal placeholder -->
		</div>
	)}
	{!isLocal && <img src={isPublic ? url(src) : src} alt={alt || ""} class={imageClass} style={imageStyle}/>} 
</div>
